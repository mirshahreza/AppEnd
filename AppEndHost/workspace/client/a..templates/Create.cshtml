@using AppEndServer
@using AppEndDbIO
@using AppEndCommon
@using System.Linq.Expressions
@using Newtonsoft
@using Newtonsoft.Json
@using RazorEngine.Text
@{
	string submitRPC = Model.ClientUI.SubmitAPI;
	string dbConfName = Model.DbDialog.DbConfName.ToString();

	string filePrefix = dbConfName.EqualsIgnoreCase(AppEndSettings.DefaultDbConfName) ? "" : dbConfName + "_";

	var createColumns = Model.GetCreateColumns();

	List<string> groups = Model.DbDialog.GetGroups(submitRPC);

	List<DbQueryColumn> humanIdCols = Model.GetColumnsHumanIdsForForm(submitRPC);
	List<DbQueryColumn> imageCols = Model.GetColumnsImageForForm(submitRPC);
	List<DbQueryColumn> normalCols = Model.GetColumnsNormalForForm(submitRPC);
	
	var relationsManyToMany = Model.DbDialog.GetRelations(submitRPC, RelationType.ManyToMany);
	var relationsOneToManyFileCentric = Model.DbDialog.GetRelations(submitRPC, RelationType.OneToMany, true);
	var relationsOneToManyNormal = Model.DbDialog.GetRelations(submitRPC, RelationType.OneToMany, false);

}
<template>
	<div class="card h-100 bg-transparent rounded-0 border-0">
		<div class="card-header p-2 bg-success-subtle rounded-0 border-0" v-if="ismodal!=='true'">
			<div class="hstack gap-1">
				<button class="btn btn-sm btn-link text-decoration-none bg-hover-light" @click="ok" data-ae-key="ok">
					<i class="fa-solid fa-save pe-1"></i>
					<span>{{shared.translate("Save")}}</span>
				</button>
				<div class="p-0 ms-auto"></div>
			</div>
		</div>

		<div class="card-body bg-primary-subtle-light scrollable">


				@if (imageCols.Count > 0)
				{
					<div class="card rounded-1 border-light mb-1">
						<div class="card-body">
							<div class="col-48">
								<div class="row">
									<div class="col"></div>
									@foreach (DbQueryColumn col in imageCols)
									{
										<div class="col-12">
											@(new RawString(Model.CompileTemplate("FormColumnContent", col.Name)))
										</div>
									}
									<div class="col"></div>
								</div>
							</div>
						</div>
					</div>
				}

				@if (humanIdCols.Count > 0)
				{
					<div class="card rounded-1 border-light mb-1">
						<div class="card-body">
							<div class="row">
								@foreach (DbQueryColumn col in humanIdCols)
								{
									<div class="col-48" v-if="inputs.fkColumn!=='@col.Name'">
										@(new RawString(Model.CompileTemplate("FormColumnContent", col.Name)))
									</div>
								}
							</div>
						</div>
					</div>
				}

				@if (normalCols.Count > 0)
				{
					<div class="card rounded-1 border-light mb-1">
						<div class="card-body">
							<div class="row">
								@foreach (DbQueryColumn col in normalCols)
								{
									<div class="col-48" v-if="inputs.fkColumn!=='@col.Name'">
										@(new RawString(Model.CompileTemplate("FormColumnContent", col.Name)))
									</div>
								}
							</div>
						</div>
					</div>
				}

				@foreach (string g in groups)
				{
					@if(Model.GetColumnsByGroupNameForForm(g).Count>0)
					{
						<div class="card rounded-1 border-light mb-1">
							<div class="card-header text-bg-light p-1">
								{{shared.translate('@g')}}
							</div>
							<div class="card-body">
								<div class="row">
									@foreach (DbQueryColumn col in Model.GetColumnsByGroupNameForForm(g))
									{
									<div class="col-48" v-if="inputs.fkColumn!=='@col.Name'">
											@(new RawString(Model.CompileTemplate("FormColumnContent", col.Name)))
										</div>
									}
								</div>
							</div>
						</div>
					}
				}

				@foreach (var rel in relationsManyToMany)
				{
					<div class="card rounded-1 border-light mb-1">
						<div class="card-header text-bg-light p-1">
							{{shared.translate('@rel.RelationName')}}
						</div>
						<div class="card-body">
							<div class="col-48">
								@if (rel.RelationUiWidget.ToString() == "CheckboxList")
								{
									@(new RawString(Model.CompileTemplate("FormRelationCheckboxList", rel.RelationName)))
								}
								@if (rel.RelationUiWidget.ToString() == "AddableList")
								{
									@(new RawString(Model.CompileTemplate("FormRelationAddable", rel.RelationName)))
								}
							</div>
						</div>
					</div>
				}

				@foreach (var rel in relationsOneToManyFileCentric)
				{
					<div class="card rounded-1 border-light mb-1">
						<div class="card-body">
							<div class="col-48">
								@(new RawString(Model.CompileTemplate("FormRelationFiles", rel.RelationName)))
							</div>
						</div>
					</div>
				}

				@foreach (var rel in relationsOneToManyNormal)
				{
					<div class="card rounded-1 border-light mb-1">
						<div class="card-body">
							<div class="col-48">
								@(new RawString(Model.CompileTemplate("FormRelationNormal", rel.RelationName)))
							</div>
						</div>
					</div>
				}

		</div>
        <div class="card-footer p-0 bg-secondary-subtle bg-gradient border-0 rounded-0">
            <button class="btn btn-link text-decoration-none bg-hover-light w-100 py-3 rounded-0" @click="ok" data-ae-key="ok">
                <i class="fa-solid fa-save pe-1"></i> <span>{{shared.translate("Save")}}</span>
            </button>
        </div>
	</div>
</template>

<script>
	let _this = { cid: "", ismodal:"", c: null, templateType:"Create", inputs: {}, dbConfName: "", objectName: "", submitMethod: "", initialRequests: [], initialResponses: [], pickerRequests: [], pickerHumanIds: [], row: {}, Relations: {}, RelationsMetaData: {}, regulator: null };
	_this.dbConfName = "@Model.DbDialog.DbConfName";
	_this.objectName = "@Model.DbDialog.ObjectName";
	_this.submitMethod = "@submitRPC";

	@(new RawString("_this.row = " + Model.GetCreateRpcBody() + ";"))

	@foreach (var relO in relationsManyToMany)
	{
		@(new RawString("\n\r_this.Relations['" + relO.RelationTable + "']=[];"))
		@(new RawString("\n\r_this.RelationsMetaData['" + relO.RelationName + "']=" + relO.ToJsonStringByBuiltIn(false) + ";"))
		@(new RawString("\n\r_this.initialRequests.push(" + Model.GetApiBodyForLinkingColumn(relO.RelationName).ToJsonStringByBuiltIn(false) + ");"))
	}

	@foreach (var relO in relationsOneToManyFileCentric)
	{
		@(new RawString("\n\r_this.Relations['" + relO.RelationTable + "']=[];"))
		@(new RawString("\n\r_this.RelationsMetaData['" + relO.RelationName + "']=" + relO.ToJsonStringByBuiltIn(false) + ";"))
	}

	@foreach (var relO in relationsOneToManyNormal)
	{
		@(new RawString("\n\r_this.Relations['" + relO.RelationTable + "']=[];"))
		@(new RawString("\n\r_this.RelationsMetaData['" + relO.RelationName + "']=" + relO.ToJsonStringByBuiltIn(false) + ";"))
		@(new RawString("\n\r_this.RelationsMetaData['" + relO.RelationName + "']['createComponent']='" + "/a.Components/" + filePrefix + relO.RelationTable + "_Create" + "';"))
		@(new RawString("\n\r_this.RelationsMetaData['" + relO.RelationName + "']['updateComponent']='" + "/a.Components/" + filePrefix + relO.RelationTable + "_UpdateByKey" + "';"))
	}


	@foreach (var col in createColumns)
	{
		var dbCol = Model.DbDialog.GetColumn(col.Name);
		string uiWidget = (dbCol.UiProps != null && dbCol.UiProps.UiWidget != null) ? dbCol.UiProps.UiWidget.ToString().ToLower() : "";
		string collectionName = (uiWidget == "combo" || uiWidget == "radio") ? "initialRequests" : "pickerRequests";

		if (dbCol.Fk is not null && dbCol.Fk.Lookup is not null)
		{
			if (dbCol.Fk.JsLookupParentId.ToStringEmpty() == "")
			{
				var lookUp = dbCol.Fk.Lookup;
				lookUp.Id = dbCol.Name + "_Lookup";
				@(new RawString("\n\r_this." + collectionName + ".push(" + lookUp.ToJsonStringByBuiltIn(false) + ");"))
			}
			if (collectionName == "pickerRequests")
			{
				@(new RawString("\n\r_this.pickerHumanIds.push({Id:'" + col.Name + "_HumanIds',Items:" + Model.GetTargetHumanIdsFor(dbCol).ToJsonStringByBuiltIn(false) + "});"))
			}
		}
	}

	export default {
		methods: {
		},
		setup(props) { 
			_this.cid = props['cid'];
			_this.ismodal = props['ismodal'];
			_this.inputs = shared["params_" + _this.cid];
		},
		data() { return _this; },
		created() { _this.c = this; assignDefaultMethods(_this); },
		mounted() { initVueComponent(_this); _this.c.loadBaseInfo(); _this.c.componentFinalization(); },
		props: { cid: String, ismodal: String }
	}
</script>
